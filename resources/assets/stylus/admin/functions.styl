/*==== Colors ====*/
get-color($val) {
  return colors [ $val ]
}

light-color($color, $lightness) {
  return lighten($color, $lightness)
}

dark-color($color, $darkness) {
  return darken($color, $darkness)
}

/*==== Hash  ====*/
nth($hash, $index) {
  return $hash[$index]
}

/*=== Font Size To Rem ===*/
set-font-size(value) {
  font-size: value;
  if (value is inherit) {
    /* do nothing, "inherit" has no unit */
  } else {
    font-size: remify(value);
  }
}

/*==== Divide ====*/
divide(a, b)
  if a is a 'unit' and b is a 'unit'
    a / b
  else
    (error 'a and b must be units!')

/*==== BEM Convention ====*/
e(x)
  &__{x}
    {block}

m(x)
  &--{x}
    {block}

/*=== Ease ===*/
$ease = {
  'linear'             : cubic-bezier(0.250, 0.250, 0.750, 0.750),
  'ease'               : cubic-bezier(0.250, 0.100, 0.250, 1.000),
  'ease-in'            : cubic-bezier(0.420, 0.000, 1.000, 1.000),
  'ease-in-out'        : cubic-bezier(0.420, 0.000, 0.580, 1.000),
  'ease-in-quad'       : cubic-bezier(0.550,  0.085, 0.680, 0.530),
  'ease-in-cubic'      : cubic-bezier(0.550,  0.055, 0.675, 0.190),
  'ease-in-quart'      : cubic-bezier(0.895,  0.030, 0.685, 0.220),
  'ease-in-quint'      : cubic-bezier(0.755,  0.050, 0.855, 0.060),
  'ease-in-sine'       : cubic-bezier(0.470,  0.000, 0.745, 0.715),
  'ease-in-expo'       : cubic-bezier(0.950,  0.050, 0.795, 0.035),
  'ease-in-circ'       : cubic-bezier(0.600,  0.040, 0.980, 0.335),
  'ease-in-back'       : cubic-bezier(0.600, -0.280, 0.735, 0.045),
  'ease-out'           : cubic-bezier(0.000, 0.000, 0.580, 1.000),
  'ease-out-quad'      : cubic-bezier(0.250,  0.460, 0.450, 0.940),
  'ease-out-cubic'     : cubic-bezier(0.215,  0.610, 0.355, 1.000),
  'ease-out-quart'     : cubic-bezier(0.165,  0.840, 0.440, 1.000),
  'ease-out-quint'     : cubic-bezier(0.230,  1.000, 0.320, 1.000),
  'ease-out-sine'      : cubic-bezier(0.390,  0.575, 0.565, 1.000),
  'ease-out-expo'      : cubic-bezier(0.190,  1.000, 0.220, 1.000),
  'ease-out-circ'      : cubic-bezier(0.075,  0.820, 0.165, 1.000),
  'ease-out-back'      : cubic-bezier(0.175,  0.885, 0.320, 1.275),
  'ease-in-out-quad'   : cubic-bezier(0.455,  0.030, 0.515, 0.955),
  'ease-in-out-cubic'  : cubic-bezier(0.645,  0.045, 0.355, 1.000),
  'ease-in-out-quart'  : cubic-bezier(0.770,  0.000, 0.175, 1.000),
  'ease-in-out-quint'  : cubic-bezier(0.860,  0.000, 0.070, 1.000),
  'ease-in-out-sine'   : cubic-bezier(0.445,  0.050, 0.550, 0.950),
  'ease-in-out-expo'   : cubic-bezier(1.000,  0.000, 0.000, 1.000),
  'ease-in-out-circ'   : cubic-bezier(0.785,  0.135, 0.150, 0.860),
  'ease-in-out-back'   : cubic-bezier(0.680, -0.550, 0.265, 1.550)
};

ease($name = 'ease')
  for $ent, $key in $ease
    if $name is $ent
      return $key
  return $name

/*=== Conversion ===*/
-convert-to(to-unit, value, context = $font-size-base)
  from-unit = unit(value)
  return value if to-unit is from-unit
  if to-unit in ('em' 'rem')
    return value if from-unit in ('em' 'rem')
    return unit((value / context), to-unit)
  if to-unit is 'px'
    return unit((value * context), 'px')

_strip-units( val )
  unit( val, "" )

rem(value)
  -convert-to('rem', value)

em(value, base = $font-size-base)
  -convert-to('em', value)

px(value)
  -convert-to('px', value)